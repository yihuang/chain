---
kind: pipeline
name: default

platform:
  os: linux
  arch: amd64

steps:
- name: restore-cache
  image: drillster/drone-volume-cache
  volumes:
  - name: cache
    path: /cache
  settings:
    restore: true
    # ttl: 1
    mount:
      - ./drone

- name: build
  image: cryptocom/chain-test:latest
  pull: if-not-exists
  commands:
  - export CARGO_HOME=$PWD/drone/cargo
  - export CARGO_TARGET_DIR=$PWD/drone/target
  - ./docker/build.sh

- name: unit-tests
  image: cryptocom/chain-test:latest
  pull: if-not-exists
  commands:
  - export CARGO_HOME=$PWD/drone/cargo
  - export CARGO_TARGET_DIR=$PWD/drone/target
  - cargo test

- name: integration-tests
  image: cryptocom/chain-test:latest
  pull: if-not-exists
  privileged: true
  volumes:
  - name: sgx
    path: /dev/sgx
  environment:
    SPID:
      from_secret: SPID
    IAS_API_KEY:
      from_secret: IAS_API_KEY
  commands:
  - export CARGO_TARGET_DIR=$PWD/drone/target
  - export PYTHON_VENV_DIR=$PWD/drone/venv
  - LD_LIBRARY_PATH=/opt/intel/libsgx-enclave-common/aesm /opt/intel/libsgx-enclave-common/aesm/aesm_service
  - ./integration-tests/run.sh

- name: multinode-tests
  image: cryptocom/chain-test:latest
  pull: if-not-exists
  privileged: true
  volumes:
  - name: sgx
    path: /dev/sgx
  environment:
    SPID:
      from_secret: SPID
    IAS_API_KEY:
      from_secret: IAS_API_KEY
  commands:
  - export CARGO_TARGET_DIR=$PWD/drone/target
  - export PYTHON_VENV_DIR=$PWD/drone/venv
  - LD_LIBRARY_PATH=/opt/intel/libsgx-enclave-common/aesm /opt/intel/libsgx-enclave-common/aesm/aesm_service
  - ./integration-tests/run_multinode.sh

- name: teardown
  image: cryptocom/chain-test:latest
  pull: if-not-exists
  commands:
  - ./integration-tests/cleanup.sh
  when:
    status:
      - success
      - failure

- name: rebuild-cache
  image: drillster/drone-volume-cache
  volumes:
  - name: cache
    path: /cache
  settings:
    rebuild: true
    # ttl: 1
    mount:
      - ./drone

- name: coverage
  image: cryptocom/chain-test:latest
  pull: if-not-exists
  privileged: true
  environment:
    CODECOV_TOKEN:
      from_secret: CODECOV_TOKEN
  commands:
  - export CARGO_HOME=$PWD/drone/cargo
  - export CARGO_TARGET_DIR=$PWD/drone/target
  - cargo clean
  - RUSTFLAGS="$RUSTFLAGS -C link-dead-code" cargo test --no-run -v
  - cargo kcov --no-clean-rebuild --all
  - bash <(curl -s https://codecov.io/bash);

volumes:
  - name: cache
    host:
      path: /tmp/drone-cache
  - name: sgx
    host:
      path: /dev/sgx

trigger:
  branch:
  - master
  - staging
  - trying
  event:
  - push

---
kind: pipeline
type: exec
name: sgx-cargo-1804-hw1

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  commands:
  - ls -l /dev/sgx
  - ls -l /var/run/aesmd/aesm.socket
  - docker run --name hw1-${DRONE_COMMIT_SHA} --rm -v $PWD:/chain --device /dev/sgx cryptocom/chain:latest /bin/bash /chain/ci-scripts/tx-validation-hw-test.sh
- name: Teardown
  commands:
   - docker stop hw1-${DRONE_COMMIT_SHA} || exit 0
  when:
    status:
      - success
      - failure

trigger:
  branch:
  - master
  - staging
  - trying
  event:
  - push

---
kind: pipeline
type: exec
name: sgx-cargo-1804-hw2

platform:
  os: linux
  arch: amd64

steps:
- name: Build and Test
  environment:
    SPID:
      from_secret: SPID
    IAS_API_KEY:
      from_secret: IAS_API_KEY
  commands:
  - ls -l /dev/sgx
  - ls -l /var/run/aesmd/aesm.socket
  - docker run --name hw2-${DRONE_COMMIT_SHA} --rm --env SPID=$SPID --env IAS_API_KEY=$IAS_API_KEY -v $PWD:/chain --device /dev/sgx cryptocom/chain:latest /bin/bash /chain/ci-scripts/tx-query-hw-test.sh
- name: Teardown
  commands:
   - docker stop hw2-${DRONE_COMMIT_SHA} || exit 0
  when:
    status:
      - success
      - failure

trigger:
  branch:
  - master
  - staging
  - trying
  event:
  - push

---
kind: signature
hmac: 4ffc692e5e8f67c7eb37a5f594e7bbb0edc78959d19547613c87b95021ad1331

...
